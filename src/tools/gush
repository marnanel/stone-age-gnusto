#!/usr/bin/env xpcshell
// gush v2.0, copyright (c) 2003 the gnusto project
// now supports the xpcshell

function gnusto_error(number) {
  dump('Gnusto error: '+number+'\n\n');
  if (number<500) {
    quit(2);
  }
}

var main_args = arguments;

function next_argument() {
  var result = main_args.shift();

  if (!result) {
    print('\nEnd of run (reached end of arguments).');
    quit(1);
  }

  return result;
}

function burin(reason, text) {
  print('['+reason+'] '+text);
}

if (arguments.length==0) {
  print('gush v2.0 - gnusto for the unix shell. dev tool. licence as for gnusto itself.');
  print();
  print('syntax: gush <story> [<argument> [<argument> ...]]');
  print();
  print('<story> - an mz5 encoded story');
  print('  (to ensure this works on all xpcshells)');
  print('<argument> - things to do in order at junctures in the story');
  print('  the first letter of an argument dictates its function');
  print('   . (dot) = command read from keyboard. "_"s are replaced with spaces.');
  print('         k = keypress with zscii value. "k" alone is space.');
  print('- (hyphen) = affect the whole process; should come first');
  print('               -g = turn on Golden Trail');
  print('    and others we might think of later.');
  quit(1);
}

var use_golden_trail = 0;

while (arguments.length > 0 && arguments[0][0]=='-') {
  var switcher = arguments.shift();
  if (switcher[1]=='g') {
    use_golden_trail = 1;
  } else {
    print('gush: Unknown switch: '+switcher);
    quit(1);
  }
}

dump('Loading story... ');
f = new Components.Constructor('@mozilla.org/file/local;1',
			       'nsILocalFile',
			       'initWithPath')(arguments.shift());
dump('done.\n');

//var fc = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
//fc.init(f, 1, 0, 0);

var fc = Components.Constructor('@mozilla.org/network/file-input-stream;1',
				'nsIFileInputStream',
				'init')(f, 1, 0, 0);

dump('Loading engine... ');
engine = new Components.Constructor('@gnusto.org/engine;1',
				    'gnustoIEngine',
				    'loadStory')(fc, f.fileSize);
fc.close();
dump('done.\n');

if (use_golden_trail) {
  engine.goldenTrail = 1;
}

engine.setByte(25, 0x20); // screen h, chars
engine.setByte(80, 0x21); // screen w, chars
engine.setWord(80, 0x22); // screen w, units
engine.setWord(25, 0x24); // screen h, units
engine.setByte( 1, 0x26); // font w, units
engine.setByte( 1, 0x27); // font h, units

var result = 'WO';

var ignorables = {'WO': 1,
		  'XC': 1,
		  'SS': 1,
		  'FX': 1,
		  'TW': 1,
		  'SW': 1,
		  'YW': 1,
		  'YL': 1,
		  'SC': 1,
		  'SB': 1,
		  'SI': 1};

while(1) {
  do {
    engine.run();
    dump(engine.consoleText());
    result = engine.effect(0);
  } while (result in ignorables);

  if (result=='RS') {
    var nextanswer = next_argument();
    if (nextanswer[0]=='.') {
      var answer = String(nextanswer).substring(1).replace('_',' ','g');
      engine.answer(0, answer);
      print('\n>'+answer);
    } else {
      print('Need a response here (starting with a dot).');
      quit(1);
    }
  } else if (result=='RC') {
    var nextanswer = next_argument();
    if (nextanswer=='k') {
      engine.answer(0, '32');
    } else if (nextanswer[0]=='k') {
      engine.answer(0, String(nextanswer.substring(1) * 1));
    } else {
      print('Need a keypress here (try just "k").');
      quit(1);
    }
  } else if (result=='PT') {
    // fixme: won't work any more
    dump(engine__effect_parameters);
  } else if (result=='QU') {
    if (next_argument()=='Q') {
      print('Story quit as expected.\n');
      quit(0);
    } else {
      print('Unexpected quit! (Use "Q" to suppress this message.)\n');
      quit(1);
    }
  } else {
    print('Not sure what to do with this effect: '+result);
    quit(1);
  }

};
