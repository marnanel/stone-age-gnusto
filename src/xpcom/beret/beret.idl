#include "nsISupports.idl"
#include "xpcom/engine/gnusto-engine.idl"

// The beret takes loaded files and decides where they should go.

[scriptable, uuid(ed0618e3-8b2b-4bc8-b1a8-13ae575efc60)]
interface gnustoIBeret : nsISupports
{

  // Gives the beret a file to consider. After calling this,
  // |filetype| will give you a string to show what to do
  // with it.
  void load(in PRUint32 aLength,
	    [size_is(aLength), array] in PRUint8 info);

  // Call after load(). Returns a string describing the array
  // that was most recently passed in to load()'s |info| param.
  //
  // The string is a series of keywords separated by spaces.
  //
  // The first keyword is one of:
  //   ok           - the file is acceptable
  //   invalid      - the file is somehow broken
  //   nyi          - the file is understood, but we don't support it (yet)
  //   error        - some other error
  //
  // The second keyword will be one of:
  //   none         - either we haven't seen an array yet
  //                  or it was an array with zero length
  //   story        - it contained a story.
  //                  Third word is "naked" if it was a single
  //                  file (in z-machine, Glulx, or some other
  //                  format). Otherwise it was a file
  //                  including multiple kinds of subfiles
  //                  (which pretty much always means Blorb)
  //                  and the third word is a keyword for
  //                  this (which will be "blorb" for Blorb).
  //                  Fourth word describes the architecture:
  //                   * zX where X is the version number, e.g. z5
  //                   * glulx
  //   saved        - it contained a saved game.
  //                  Third word is the game format:
  //                   * quetzal  - the only one defined for now
  //   unknown       - we can't tell what it was.
  //
  //  For example, these are all possible results:
  //     ok story blorb glulx
  //     ok story naked z5
  //     invalid saved quetzal
  //
  // In the case of successful "story" loads, the component will also
  // create an engine of the relevant type and load the story into it.
  // You will be able to retrieve this engine using the "engine" property.
  // The engine remains available in this way, and the same engine will
  // be used for loading saved games into.
  readonly attribute string filetype;

  readonly attribute gnustoIEngine engine;
};
