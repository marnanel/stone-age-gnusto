# Copyright (c) 2003 Thomas Thurman
# thomas@thurman.org.uk
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have be able to view the GNU General Public License at 
# http://www.gnu.org/copyleft/gpl.html ; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

################################################################

#                        THE BURIN
#                        =========

# If this is defined to be the name of a file, lots of debugging information
# will be printed to that file. /dev/stderr is a good choice on Unixes
# which support it.

#burin.filename = /dev/stderr

# If you define the burin.filename to be "OFF", nothing will be printed.
burin.filename = OFF

################################################################

#                        COMMANDS
#                        ========

# This will have to end up being pop-up help, not just a dump of all commands.
# cmd.help.label = &Help
# cmd.help.key = VK_F1
# cmd.help.help = Provide brief help on all commands.

################################################################

cmd.open.label = &Open
cmd.open.key = accel O
cmd.open.help = Load a file, such as a story file

################################################################

cmd.status.label = &Status
cmd.status.help = Show value of program counter and local variables

################################################################

cmd.on.label = On
cmd.on.help = Enable debugging

################################################################

# and other debugging commands

################################################################

cmd.about.label = &About
cmd.about.help = show the about box

################################################################

#                       ERROR MESSAGES
#                       ==============

# Section names are "error.[number in decimal].[section]", where [section] can be:
#   name: the short name displayed in the error dialogue
#   details: a longer description
#   ignore: defined if this is ignored by default

error.100.name = Can't modify gosub.
error.100.details = The program passed a subroutine call into another function, but the call was too complicated for that function to be able to figure out how to insert a handler for the return value. 

error.101.name = Not implemented.
error.101.details = The story attempted to use an opcode, or a feature of an opcode, that really should exist but doesn't. You should report this as an enhancement request, if it hasn't already been reported.

error.170.name = Impossible.
error.170.details = This happens when control reaches a place it should logically never be able to reach. Obviously, this means the logic is broken. 

error.199.name = Extended opcode.
error.199.details = Opcode 190 is handled specially, and so shouldn't ever be treated as an ordinary opcode. If it is, this happens. 

error.200.name = Unknown opcode.
error.200.details = The story used an opcode that Gnusto doesn't know. If the opcode is defined in the Z-spec, this should be reported as an enhancement request.

error.201.name = Lost in space.
error.201.details = A special case of 200. There is no opcode zero, and zero is what you're most likely to find in odd places in memory. So opcode zero triggers this error.

error.202.name = Too many memory streams.
error.202.details = A story can write a stream of data into its own memory. The spec says that a story may only have sixteen of these at once. If you try and open seventeen of them, you get this error.

error.203.name = No more memory streams.
error.203.details = If a story attempts to stop writing a stream of data into its own memory, but there isn't one to stop, it will cause this error.

error.204.name = Weird output stream number.
error.204.details = The spec defines four kinds of output streams, and the story attempted to use a number which didn't correspond to any of them.

error.206.name = Unreal property.
error.206.details = The story asked what followed a particular property of an object, and there wasn't such a property.

error.207.name = Unreal cookie thrown.
error.207.details = The story attempted to @throw something that couldn't be @thrown-- for example, because it hadn't previously been @catched.

error.300.name = JavaScript compile error ("unhappy source").
error.300.details = This error is caused when one of Gnusto's own source code files fails to compile.

error.301.name =  File not found. 
error.301.details = You asked Gnusto to load a file which doesn't exist. 

error.302.name =  Invalid store. 
error.302.details = The story attempted to write something invalid to memory. 

error.303.name =  Unearthly window. 
error.303.details = Version 5 stories have only two windows. This error occurs when they try to use one that doesn't exist. 

error.304.name =  Unknown effect. 
error.304.details = When Gnusto's engine wants to stop and send some sort of signal to its environment, it uses a numeric code called an "effect". This error occurs when the effect number is unknown. 

error.307.name =  General exception. 
error.307.details = Something happened within Gnusto which caused an exception that wasn't otherwise caught. The last-ditch handler saw it, though, and generated this error.

error.308.name =  Can't create spontaneous transcript. 
error.308.details = This should be quite a rare one. The engine is supposed to notify its environment before it starts sending out transcript information. If it starts anyway, the environment will attempt to deal by setting up a transcript file anyway. That can fail, though, in which case this error will be generated. 

error.309.name = Unknown file format.
error.309.details = You asked Gnusto to load a file, but it's not in any format it knows how to handle.

error.310.name = Unsupported Z-machine version.
error.310.details = There are several versions of the Z-machine. Gnusto currently supports only versions 5, 7, and 8. Other versions will be supported in the future.

# transient version of "not implemented"
error.601.name = Not implemented.
error.601.details = You wanted to do something which we haven't written yet.

error.700.name = Spurious restore_undo.
error.700.details = The story attempted to restore_undo without first successfully save_undoing. 

error.701.name = Division by zero.
error.701.details = Gnusto will supply zero as the answer if asked to carry on.

error.702.name = Illegal ZSCII code.
error.702.details = The story attempted to output a ZSCII character outside the permitted range, which is 0-1023. Gnusto will supply 42 ('*') as the answer if asked to carry on.

error.703.name = Unknown ZSCII code.
error.703.details = The story attempted to output a ZSCII character which Gnusto didn't know how to handle. Gnusto will supply 42 ('*') as the answer if asked to carry on.

error.704.name = Put undefined property.
error.704.details = The story attempted to set a property, but didn't tell Gnusto which one. You think we're mindreaders here?

error.705.name = Property too long to put.
error.705.details = The put_prop opcode only works for properties with lengths less than three bytes.

error.706.name = Property too long to get.
error.706.details = The get_prop opcode only works for properties with lengths already less than three bytes. (You can get at the data in other ways, just not with this opcode.) Gnusto will return the first two bytes if asked to carry on.
# This error is ignored by default to work around a bug in old versions of the Inform library.
# See <http://www.mozdev.org/bugs/show_bug.cgi?id=3314>.
error.706.ignore = 1

