#!/usr/local/bin/xpcshell
// gush, copyright (c) 2003 the gnusto project

// Should be defined inside g-l, but doesn't seem to be.
var zalphabet = {
  0: 'abcdefghijklmnopqrstuvwxyz',
  1: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
  2: 'T\n0123456789.,!?_#\'"/\\-:()', // T = magic ten bit flag
}

function gnusto_error(number) {
  dump('Gnusto error: '+number+'\n\n');
  quit(2);
}

var main_args = arguments;

function next_argument() {
  var result = main_args.shift();

  if (!result) {
    print('\nEnd of run (reached end of arguments).');
    quit(1);
  }

  return result;
}

function burin(reason, text) {
  print('['+reason+'] '+text);
}

if (arguments.length==0) {
  print('gush - gnusto for the unix shell. dev tool. licence as for gnusto itself.');
  print();
  print('syntax: gush <story> [<argument> [<argument> ...]]');
  print();
  print('<story> - an mz5 encoded story');
  print('  (to ensure this works on all xpcshells)');
  print('<argument> - things to do in order at junctures in the story');
  print('  the first letter of an argument dictates its function');
  print('   . (dot) = command read from keyboard. "_"s are replaced with spaces.');
  print('         k = keypress with zscii value. "k" alone is space.');
  print('- (hyphen) = affect the whole process (none defined yet)');
  print('    and others we might think of later.');
  quit(1);
}

dump('Loading story... ');
f = new Components.Constructor('@mozilla.org/file/local;1',
			       'nsILocalFile',
			       'initWithPath')(arguments.shift());

var fc = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
  	 
fc.init(f, 1, 0, 0); 	 

var sis = new Components.Constructor("@mozilla.org/scriptableinputstream;1", 	 
				     "nsIScriptableInputStream")(); 	 
sis.init(fc);
var content = sis.read(f.fileSize); 	 
fc.close(); 	 
dump('done.\n');

if (content.length!=f.fileSize) { 	 
  dump('\nYou seem to have opened an ordinary, non-encoded story file.\n\n');
  quit(1);
}

dump('Translating story... ');
var halfsize = content.length/2;
var memory = [];

for (var i=0; i<halfsize; i++) {
  if (content[halfsize+i]=='Y') {
    memory.push(0);
  } else {
    memory.push(content.charCodeAt(i));
  }
}

content = '';
dump('done.\n');

dump('Loading engine... ');
load('/home/marnanel/proj/mozdev/gnusto/src/gnusto/content/gnusto-lib.js');
engine_start_game(memory);
dump('done.\n');

var result = 0x500;
var answer = 0;

var ignorables = {0x500: 1,
		  0x520: 1,
		  0x700: 1,
		  0x800: 1,
		  0x900: 1,
		  0x910: 1,
		  0x920: 1,
		  0x930: 1,
		  0x940: 1,
		  0x950: 1,
		  0x960: 1};

while(1) {
  do {
    result = engine_run(answer);
    answer = 0;
    dump(engine_console_text());
  } while (result in ignorables);

  if (result==0x100) {
    var nextanswer = next_argument();
    if (nextanswer[0]=='.') {
      answer = String(nextanswer).substring(1).replace('_',' ','g');
      print('\n>'+answer);
    } else {
      print('Need a response here (starting with a dot).');
      quit(1);
    }
  } else if (result==0x110) {
    var nextanswer = next_argument();
    if (nextanswer=='k') {
      answer = 32;
    } else if (nextanswer[0]=='k') {
      answer = nextanswer.substring(1) * 1;
    } else {
      print('Need a keypress here (try just "k").');
      quit(1);
    }
  } else if (result==0xa00) {
    dump(engine__effect_parameters);
  } else {
    print('Not sure what to do with this effect: '+result.toString(16));
    quit(1);
  }

};
